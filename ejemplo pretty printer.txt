(lambda n:Nat. (lambda m:Nat. if (iszero (n)) then (m) else (succ ((((fix (lambda sum:(Nat) -> ((Nat) -> (Nat)). (lambda n:Nat. (lambda m:Nat. if (iszero (n)) then (m) else (succ (((sum pred (n)) m))))))) pred (n)) m))))) : (Nat) -> ((Nat) -> (Nat))

lambda n:Nat.    
  (lambda m:Nat. 
    if
      iszero n
    then
      m
    else
      succ ((fix lambda sum:Nat -> (Nat -> Nat).
        (lambda n:Nat.
          (lambda m:Nat.
            if
              iszero n
            then
              m
            else
              succ (sum (pred n) m)
          )
        )) (pred n) m)
  )
: Nat -> (Nat -> Nat)