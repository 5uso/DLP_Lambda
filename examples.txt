"Sum of two nats";;
sum = letrec sum : Nat -> Nat -> Nat =
  lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
sum;;

sum 27 11;;

"Product of two nats";;
prod = letrec prod : Nat -> Nat -> Nat =
  lambda n : Nat. lambda m : Nat. if iszero n then 0 else sum (prod (pred n) m) m in
prod;;

prod 27 11;;

"Get nth element of the fibonacci sequence";;
fib = letrec fib : Nat -> Nat =
  lambda n : Nat. if iszero n then 0 else (if iszero (pred n) then 1 else sum (fib (pred n)) (fib (pred (pred n)))) in
fib;;

fib 11;;

"Factorial of a nat";;
fact = letrec fact : Nat -> Nat =
  lambda n : Nat. if iszero n then 1 else prod (fact (pred n)) n in
fact;;

fact 5;;

"String concatenation";;
print_string ("a" ^ "b");;
print_string ("a" ^ ("
" ^ "b" ));;

"Length of a list (of nats)";;
length = letrec length : [Nat] -> Nat =
  lambda l : [Nat]. if isnil[Nat] l then 0 else succ (length (tail[Nat] l)) in
length;;

length Nat[1,2,3,4,5,6];;

"Append a list of nats to another";;
append = letrec append : [Nat] -> [Nat] -> [Nat] =
  lambda l1 : [Nat]. lambda l2 : [Nat]. if isnil[Nat] l1 then l2 else cons[Nat] (head[Nat] l1) (append (tail[Nat] l1) l2) in
append;;

append Nat[1,2,3] Nat[4,5,6];;

"Map a list of nats to another given a Nat->Nat function";;
map = letrec map : (Nat -> Nat) -> [Nat] -> [Nat] =
  lambda f : (Nat -> Nat). lambda l : [Nat]. if isnil[Nat] l then l else
  let val = f (head[Nat] l) in
    cons[Nat] val (map f (tail[Nat] l)) in
map;;

map (prod 2) Nat[1,2,3,4,5,6];;

"
Subtyping example 1:

We define a function to print information about a pet, which is represented
by a record with fields corresponding to its name, age, and species.

Then we use the function on 3 other records which fulfill the subtyping.
We can observe how changing the order of the entries and having additional
entries doesn't stop us from using the function.
However, if these 3 fields didn't exist in the record with these same names
and types, we would get a type error.
";;
let print_pet =
  lambda pet : {name: String, age: Nat, species: String}.
    (print_string pet.name; print_string " is a ";
     print_nat pet.age; print_string " year old ";
     print_string pet.species; print_string "."; print_newline())
in (print_pet {name: "John", age: 5, species: "bat"};
    print_pet {name: "Ursula", age: 27, species: "giraffe", height: "like a lot"};
    print_pet {sea_creature: true, age: 2711, name: "Brian", species: "whale", epicness: 255})
;;

"
Subtyping example 2:

We define a function that sorts a list of tuples based on each of the tuples'
first elements, which must be of type Nat. It takes as argument a comparator
function, as well as the list.

Then we define another function to use as comparator for the sorting, which
also takes tuples subtyping (Nat,).

Finally, we can use these functions to sort data according to indices indicated
by the first element of their tuples. Any tuple can be subtyped into the lists
without issue as long as its first element is of type Nat.
";;
sort_tuples = lambda f : ((Nat,) -> (Nat,) -> Bool). lambda l : [(Nat,)].
  letrec insert : [(Nat,)] -> (Nat,) -> [(Nat,)] =
    lambda l : [(Nat,)]. lambda x : (Nat,).
      if isnil[(Nat,)] l then (Nat,)[x] else (
        if f (head[(Nat,)] l) x then
          cons[(Nat,)] x l
        else
          cons[(Nat,)] (head[(Nat,)] l) (insert (tail[(Nat,)] l) x)
      )
  in letrec internal : [(Nat,)] -> [(Nat,)] -> [(Nat,)] =
    lambda l : [(Nat,)]. lambda acc : [(Nat,)]. 
      if isnil[(Nat,)] l then acc else internal (tail[(Nat,)] l) (insert acc (head[(Nat,)] l))
  in internal l (Nat,)[]
;;

is_tuple_more_equal = letrec r : (Nat,) -> (Nat,) -> Bool = 
  L a:(Nat,). L b:(Nat,).
    if iszero a.1 then false else (
      if iszero b.1 then true else r (pred a.1,) (pred b.1,)
    )
in r;;

not = lambda x : Bool. if x then false else true;;

sort_tuples is_tuple_more_equal (Nat,)[(4, "some_data_goes_here"), (3, {name: "value"}), (1, "sorted"), (7, true)];;
sort_tuples (L a:(Nat,). L b:(Nat,). not (is_tuple_more_equal a b))
  (Nat,)[(4, "epic"), (3, {name: "value"}), (1, "sorted"), (7, true)];;
