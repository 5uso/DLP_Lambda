true;;
let x = true in x;;
if false then true else false;;
0;;
succ (succ (succ 0));;
3;;
succ (pred 0);;
iszero (pred (succ (succ 0)));;
print_string "
    --- Errors ----
";;
if iszero 3 then 0 else 1;;
iszero true;;
if 1 then true else false;;
if iszero 3 then 0 else false;;
print_string "
    --- End Errors ----
";;
let id = Lx.x in id 3;; <----- No funciona;;
let id_bool = L x:Bool. x in id_bool true;;
let id_nat = L x:Nat. x in id_nat 5;;
let x = 5 in let id_nat = L x:Nat. x in id_nat x;;
letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in sum 21 34;;
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in 
    let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in 
    let sum = fix sumaux in sum 21 34;;
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in 
    let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in 
    let sum = fix sumaux in 
    let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) 
    in let prod = fix prodaux in prod 12 5;;
print_string "
    ---- Lists test ----
";;
x = cons[Nat] 7 (cons[Nat] 8 nil[Nat]);;
head[Nat] x;;
tail[Nat] x;;
let isnilnat = L x:List[Nat]. if (isnil[Nat] x) then 0 else 1 in isnilnat (cons[Nat] 8 nil[Nat]);;
letrec sum : Nat -> Nat -> Nat =
     lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
   in
     letrec length : List[Nat] -> Nat =
       lambda l : List[Nat]. if isnil[Nat] l then 0 else sum 1 (length (tail[Nat] l))
     in
       length (cons[Nat] 8 (cons[Nat] 5 (cons[Nat] 7 nil[Nat])))
print_string "
    ---- Tuple test ----
";;
x = (1,2);;
x.1;;
(1, "string").2;;
y = ("string2", 9);;
y.1;;
y.2;;
z = (1, "string", 314);;
z.1;;
z.2;;
z.3;;
y.1 ^ z.2;;
letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in sum (z.3) (y.2);;
print_string "
    ---- Records test ----
";;
x = {f1: 1, f2: "str ", f3: (), f4: 9, f5: true};;
if x.f5
    then print_string "true"
    else "false";;
x.f2 ^ x.f2;;